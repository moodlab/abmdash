---
title: "MDL R01 GABM Participant Dashboard"
---

```{r}
#| echo: false
#| output: asis
cat(paste0("**Last updated:** ", abmdash::get_central_time(), "\n\n"))
```

## Row {.tabset}

### Participant Tracking

#### Column {width=50%}

::: {.card title="Upcoming Participant Schedule"}

```{r}
# Get today's calendar events from Google Calendar
calendar_events <- tryCatch({
  # Test Google Calendar API connection
  service_account_json <- Sys.getenv("GOOGLE_SERVICE_ACCOUNT_JSON")
  
  if (service_account_json == "" || is.na(service_account_json)) {
    # Show message when Google Calendar not configured
    data.frame(
      Time = "Not configured",
      Event = "GOOGLE_SERVICE_ACCOUNT_JSON not set",
      stringsAsFactors = FALSE
    )
  } else {
    # Get next week's events (today through next 7 days)
    today_start <- paste0(Sys.Date(), "T00:00:00Z")
    next_week_end <- paste0(Sys.Date() + 7, "T23:59:59Z")
    
    # Use the specific Calendar ID for "Research Team Schedule"
    events <- abmdash::get_calendar_events(
      calendar_id = "ff5b00ef944953433c805960d64adae47a456ee0d2515410cc648f65bafc2635@group.calendar.google.com",
      time_min = today_start,
      time_max = next_week_end,
      max_results = 100
    )
    
    # Debug: Check what we're getting
    debug_info <- paste(
      "API Response - Items count:", if("items" %in% names(events)) length(events$items) else "No items field",
      "| Time range:", today_start, "to", next_week_end,
      "| Today:", Sys.Date(), "| Next week end:", Sys.Date() + 7
    )
    
    # Format events for display
    if (is.list(events) && "items" %in% names(events) && length(events$items) > 0) {
      # Filter events to only include those with "UT Attention Bias Modification" in the title
      filtered_events <- Filter(function(event) {
        summary <- event$summary %||% ""
        grepl("UT Attention Bias Modification", summary, ignore.case = TRUE)
      }, events$items)

      if (length(filtered_events) > 0) {
        # Build data frame directly - simpler approach
        Time <- character(length(filtered_events))
        Event <- character(length(filtered_events))
        SortDate <- as.POSIXct(rep(NA, length(filtered_events)))
        IsToday <- logical(length(filtered_events))

        for (i in seq_along(filtered_events)) {
          event <- filtered_events[[i]]

          # Get event summary
          summary <- if (!is.null(event$summary)) event$summary else "No title"

          # Extract time and date from start datetime
          if (!is.null(event$start$dateTime)) {
            # Parse datetime from Google Calendar (already in correct timezone)
            dt <- as.POSIXct(event$start$dateTime, format = "%Y-%m-%dT%H:%M:%S")

            if (is.na(dt)) {
              # Try without Z suffix
              dt <- as.POSIXct(gsub("Z$", "", event$start$dateTime))
            }

            if (!is.na(dt)) {
              # Get today's date in Central Time for comparison
              today_central <- as.Date(format(Sys.time(), tz = "America/Chicago"))
              event_date <- as.Date(dt)
              days_diff <- as.numeric(event_date - today_central)

              if (days_diff == 0) {
                Time[i] <- paste("Today", format(dt, "%I:%M %p"))
                IsToday[i] <- TRUE
              } else if (days_diff == 1) {
                Time[i] <- paste("Tomorrow", format(dt, "%I:%M %p"))
                IsToday[i] <- FALSE
              } else {
                day_name <- format(event_date, "%a")
                Time[i] <- paste(day_name, format(event_date, "%m/%d"), format(dt, "%I:%M %p"))
                IsToday[i] <- FALSE
              }

              SortDate[i] <- dt
              Event[i] <- summary
            }
          } else if (!is.null(event$start$date)) {
            # All-day event
            event_date <- as.Date(event$start$date)

            if (!is.na(event_date)) {
              days_diff <- as.numeric(event_date - Sys.Date())

              if (days_diff == 0) {
                Time[i] <- "Today (All Day)"
                IsToday[i] <- TRUE
              } else if (days_diff == 1) {
                Time[i] <- "Tomorrow (All Day)"
                IsToday[i] <- FALSE
              } else {
                day_name <- format(event_date, "%a")
                Time[i] <- paste(day_name, format(event_date, "%m/%d"), "(All Day)")
                IsToday[i] <- FALSE
              }

              SortDate[i] <- as.POSIXct(paste(event_date, "00:00:00"), tz = "UTC")
              Event[i] <- summary
            }
          }
        }

        # Create data frame and remove any rows with NA SortDate
        events_df <- data.frame(
          Time = Time,
          Event = Event,
          SortDate = SortDate,
          IsToday = IsToday,
          stringsAsFactors = FALSE
        )

        # Remove rows where parsing failed
        events_df <- events_df[!is.na(events_df$SortDate), ]

        # Sort by date/time in chronological order
        events_df <- events_df[order(events_df$SortDate), ]
      } else {
        data.frame(
          Time = "No ABM events",
          Event = "No UT Attention Bias Modification events scheduled",
          stringsAsFactors = FALSE
        )
      }
    } else {
      data.frame(
        Time = "Debug Info",
        Event = debug_info,
        stringsAsFactors = FALSE
      )
    }
  }
}, error = function(e) {
  data.frame(
    Time = "Error",
    Event = paste("Full error:", e$message),
    stringsAsFactors = FALSE
  )
})

# Display calendar events with highlighting for today's appointments
if ("IsToday" %in% names(calendar_events) && any(calendar_events$IsToday)) {
  # Create display table without internal columns
  display_events <- calendar_events[, c("Time", "Event")]

  # Create tinytable and highlight today's rows
  today_rows <- which(calendar_events$IsToday)
  display_events |>
    tinytable::tt(caption = "Upcoming Week's Schedule") |>
    tinytable::style_tt(i = today_rows, background = "#e3f2fd", bold = TRUE)
} else {
  # No today events or no IsToday column - display without highlighting
  if ("IsToday" %in% names(calendar_events)) {
    calendar_events[, c("Time", "Event")] |>
      tinytable::tt(caption = "Upcoming Week's Schedule")
  } else {
    calendar_events |>
      tinytable::tt(caption = "Upcoming Week's Schedule")
  }
}
```

:::

::: {.card title="Recent Eligible Participants (Check if Scheduled)"}

```{r}
# Get eligible participants from report 11942
eligible_participants <- tryCatch({
  token <- Sys.getenv("REDCAP_API_TOKEN")
  
  if (token == "" || is.na(token)) {
    # Show message when REDCap not configured
    data.frame(
      Status = "REDCAP_API_TOKEN not configured",
      Total_Records = 0,
      Eligible_Count = 0,
      stringsAsFactors = FALSE
    )
  } else {
    # Get eligible participants using our filtering function
    abmdash::get_eligible_participants()
  }
}, error = function(e) {
  data.frame(
    Status = paste("Error:", substr(e$message, 1, 50)),
    Total_Records = 0,
    Eligible_Count = 0,
    stringsAsFactors = FALSE
  )
})

# Display the results
if ("first_name" %in% names(eligible_participants)) {
  # We have actual participant data - rename columns and display
  display_data <- eligible_participants
  names(display_data) <- c("First Name", "Phone Number", "Screen Date", "Link to REDCap Record")

  display_data |>
    tinytable::tt(caption = "Eligible Participants (Past 30 Days)") |>
    tinytable::format_tt(
      j = "Link to REDCap Record",
      fn = function(x) paste0('<a href="', x, '" target="_blank">View Record</a>')
    )
} else {
  # We have summary data - display as is
  eligible_participants |>
    tinytable::tt(caption = "Eligible Participants Summary")
}
```

:::

#### Column {width=50%}

::: {.card title="Status of Follow-Up Surveys"}

```{r}
# Get upcoming follow-ups (Week 12, 16, 28)
upcoming_followups <- tryCatch({
  token <- Sys.getenv("REDCAP_API_TOKEN")
  
  if (token == "" || is.na(token)) {
    # Show sample data when REDCap not configured
    data.frame(
      record_id = c("1420", "1385", "1555", "1604"),
      follow_up_type = c("Week 12", "Week 16", "Week 12", "Week 28"),
      w4_completion_date = c("2024-06-01", "2024-05-15", "2024-06-03", "2024-01-15"),
      due_date = c("2024-07-27", "2024-08-07", "2024-07-29", "2024-07-22"),
      days_until_due = c(-3, 5, -1, 2),
      status = c("Overdue by 3 days", "Due in 5 days", "Overdue by 1 day", "Due in 2 days"),
      stringsAsFactors = FALSE
    )
  } else {
    # Get actual upcoming follow-ups (next 14 days)
    abmdash::get_upcoming_followups(days_ahead = 14)
  }
}, error = function(e) {
  cat("Follow-up tracking error:", e$message, "\n")
  data.frame(
    record_id = "ERROR",
    follow_up_type = "API Error",
    w4_completion_date = "",
    due_date = "",
    days_until_due = 0,
    status = paste("Error:", substr(e$message, 1, 20)),
    stringsAsFactors = FALSE
  )
})

# Display results
if (nrow(upcoming_followups) > 0) {
  # Update status messages to use "Send" instead of "Due" for future dates
  updated_status <- sapply(1:nrow(upcoming_followups), function(i) {
    days_until <- upcoming_followups$days_until_due[i]
    
    if (days_until < 0) {
      # Overdue - keep as is
      paste("Overdue by", abs(days_until), "days")
    } else if (days_until == 0) {
      # Due today - change to "Send Today"
      "Send Today"
    } else {
      # Future date - change to "Send in X days"
      paste("Send in", days_until, "days")
    }
  })
  
  # Format the display with colors for urgency
  display_table <- data.frame(
    "Participant" = upcoming_followups$record_id,
    "Follow Up" = upcoming_followups$follow_up_type,
    "Due Date" = format(as.Date(upcoming_followups$due_date), "%m/%d"),
    "Status" = updated_status,
    stringsAsFactors = FALSE
  )
  
  # Create tinytable with conditional formatting
  tt_table <- display_table |>
    tinytable::tt()
  
  # Add highlighting for overdue items
  if (any(grepl("Overdue", display_table$Status))) {
    overdue_rows <- which(grepl("Overdue", display_table$Status))
    tt_table <- tt_table |>
      tinytable::style_tt(i = overdue_rows, background = "#ffebee")
  }
  
  # Add highlighting for send today
  if (any(grepl("Send Today", display_table$Status))) {
    send_today_rows <- which(grepl("Send Today", display_table$Status))
    tt_table <- tt_table |>
      tinytable::style_tt(i = send_today_rows, background = "#fff3e0")
  }
  
  tt_table
} else {
  data.frame(Message = "No follow-ups due in the next 2 weeks") |>
    tinytable::tt()
}
```
:::

### Enrollment

#### Column {width=50%}

::: {.card title="Weekly Screening Statistics"}

```{r}
# Get weekly screening statistics
weekly_stats <- tryCatch({
  token <- Sys.getenv("REDCAP_API_TOKEN")

  if (token == "" || is.na(token)) {
    # Show message when REDCap not configured
    data.frame(
      Metric = c("Total Screenings", "Eligible Participants", "Eligible Hispanic Participants", "Weekly Target", "vs Target"),
      Count = c("N/A", "N/A", "N/A", "N/A", "N/A"),
      stringsAsFactors = FALSE
    )
  } else {
    # Get actual weekly stats
    stats <- abmdash::get_weekly_screening_stats()

    # Get enrollment targets to find current month's target
    enrollment_data <- abmdash::get_enrollment_targets()

    # Get current month and year
    current_date <- format(Sys.Date(), "1-%b-%y")

    # Find current month's target
    current_month_row <- enrollment_data[enrollment_data$Date == current_date, ]

    if (nrow(current_month_row) > 0) {
      monthly_target <- as.numeric(current_month_row$Target)
      weekly_target <- ceiling(monthly_target / 4)
      difference <- stats$eligible_count - weekly_target
      vs_target <- ifelse(difference >= 0,
                         paste0("+", difference),
                         as.character(difference))
    } else {
      weekly_target <- "N/A"
      vs_target <- "N/A"
    }

    data.frame(
      Metric = c("Total Screenings (Past 7 Days)", "Eligible Participants", "Eligible Hispanic Participants", "Weekly Target (Monthly/4)", "vs Target"),
      Count = c(stats$total_screenings, stats$eligible_count, stats$hispanic_count, weekly_target, vs_target),
      stringsAsFactors = FALSE
    )
  }
}, error = function(e) {
  data.frame(
    Metric = "Error",
    Count = paste("Error:", substr(e$message, 1, 30)),
    stringsAsFactors = FALSE
  )
})

# Display the weekly statistics
weekly_stats |>
  tinytable::tt(caption = "Screening Summary (Past 7 Days)")
```

:::

::: {.card title="Total Enrollment Progress"}

```{r}
#| output: asis
# Get enrollment statistics
enrollment_stats <- tryCatch({
  abmdash::get_enrollment_stats()
}, error = function(e) {
  list(
    total_enrolled = 0,
    weekly_enrolled = 0,
    current_month = format(Sys.Date(), "%B %Y"),
    error = e$message
  )
})

# Get current month's targets from enrollment_targets.csv
current_date <- format(Sys.Date(), "1-%b-%y")
enrollment_targets <- abmdash::get_enrollment_targets()

# Find the target for the current month
current_month_target <- enrollment_targets[enrollment_targets$Date == current_date, ]

if (nrow(current_month_target) > 0) {
  monthly_target <- as.numeric(current_month_target$Target)
  total_target <- as.numeric(current_month_target$Total)
} else {
  # If no exact match, find the most recent target
  enrollment_targets$parsed_date <- as.Date(paste0("01-", enrollment_targets$Date), format = "%d-%d-%b-%y")
  past_targets <- enrollment_targets[enrollment_targets$parsed_date <= Sys.Date(), ]
  if (nrow(past_targets) > 0) {
    last_row <- past_targets[nrow(past_targets), ]
    monthly_target <- as.numeric(last_row$Target)
    total_target <- as.numeric(last_row$Total)
  } else {
    monthly_target <- 15
    total_target <- 600
  }
}

# Calculate weekly target (monthly / 4, rounded up)
weekly_target <- ceiling(monthly_target / 4)

# Calculate percentages
total_pct <- if (total_target > 0) min(round((enrollment_stats$total_enrolled / total_target) * 100, 1), 100) else 0
weekly_pct <- if (weekly_target > 0) min(round((enrollment_stats$weekly_enrolled / weekly_target) * 100, 1), 100) else 0

# Determine color based on percentage
total_color <- if (total_pct >= 80) "#2E7D32" else if (total_pct >= 50) "#F57C00" else "#C62828"

# Create HTML progress bar for total enrollment
cat(paste0(
  '<div style="text-align: center; padding: 20px;">',
  '<div style="font-size: 48px; font-weight: bold; color: ', total_color, ';">',
  enrollment_stats$total_enrolled, ' / ', total_target,
  '</div>',
  '<div style="font-size: 18px; margin: 10px 0; color: #666;">',
  'Total Enrolled (', total_pct, '%)',
  '</div>',
  '<div style="background-color: #e0e0e0; border-radius: 10px; height: 30px; margin: 20px 0; overflow: hidden;">',
  '<div style="background-color: ', total_color, '; height: 100%; width: ', total_pct, '%; transition: width 0.3s;"></div>',
  '</div>',
  '<div style="font-size: 14px; color: #999;">',
  ifelse(enrollment_stats$total_enrolled >= total_target,
         '✓ Goal Reached!',
         paste0('Need ', total_target - enrollment_stats$total_enrolled, ' more to reach goal')),
  '</div>',
  '</div>'
))
```

:::

#### Column {width=50%}

::: {.card title="Weekly Enrollment (Past 7 Days)"}

```{r}
#| output: asis
# Determine color based on percentage
weekly_color <- if (weekly_pct >= 80) "#1976D2" else if (weekly_pct >= 50) "#F57C00" else "#C62828"

# Create HTML progress bar for weekly enrollment
cat(paste0(
  '<div style="text-align: center; padding: 20px;">',
  '<div style="font-size: 48px; font-weight: bold; color: ', weekly_color, ';">',
  enrollment_stats$weekly_enrolled, ' / ', weekly_target,
  '</div>',
  '<div style="font-size: 18px; margin: 10px 0; color: #666;">',
  'Past 7 Days (', weekly_pct, '%)',
  '</div>',
  '<div style="background-color: #e0e0e0; border-radius: 10px; height: 30px; margin: 20px 0; overflow: hidden;">',
  '<div style="background-color: ', weekly_color, '; height: 100%; width: ', weekly_pct, '%; transition: width 0.3s;"></div>',
  '</div>',
  '<div style="font-size: 14px; color: #999;">',
  'Weekly target: ', monthly_target, ' ÷ 4 = ', weekly_target, ' participants<br>',
  ifelse(enrollment_stats$weekly_enrolled >= weekly_target,
         '✓ Weekly Goal Reached!',
         paste0('Need ', weekly_target - enrollment_stats$weekly_enrolled, ' more this week')),
  '</div>',
  '</div>'
))
```

:::

::: {.card title="Monthly Enrollment vs Targets"}

```{r}
# Get enrollment targets data
enrollment_data <- tryCatch({
  abmdash::get_enrollment_targets()
}, error = function(e) {
  data.frame(
    Error = paste("Could not load enrollment data:", e$message),
    stringsAsFactors = FALSE
  )
})

# Combine enrollment breakdown with targets
if (!is.null(enrollment_stats$monthly_breakdown) && nrow(enrollment_stats$monthly_breakdown) > 0 &&
    "Date" %in% names(enrollment_data)) {

  # Parse dates from enrollment_targets
  enrollment_data$month_key <- format(as.Date(paste0("01-", enrollment_data$Date), format = "%d-%d-%b-%y"), "%Y-%m")
  enrollment_data$month_display <- format(as.Date(paste0("01-", enrollment_data$Date), format = "%d-%d-%b-%y"), "%B %Y")

  # Merge actual enrollments with targets
  merged_data <- merge(
    enrollment_data[, c("month_key", "month_display", "Target")],
    enrollment_stats$monthly_breakdown,
    by.x = "month_key",
    by.y = "month",
    all.x = TRUE
  )

  # Replace NA with 0 for months with no enrollments
  merged_data$count[is.na(merged_data$count)] <- 0

  # Calculate percentage
  merged_data$percentage <- ifelse(
    merged_data$Target > 0,
    round((merged_data$count / merged_data$Target) * 100, 1),
    0
  )

  # Filter to only show months up to current month (no future months)
  current_month_key <- format(Sys.Date(), "%Y-%m")
  merged_data <- merged_data[merged_data$month_key <= current_month_key, ]

  # Sort by date descending (most recent first)
  sort_order <- order(merged_data$month_key, decreasing = TRUE)
  merged_data <- merged_data[sort_order, ]

  # Create display table from sorted data
  display_table <- data.frame(
    Month = merged_data$month_display,
    Target = merged_data$Target,
    Actual = merged_data$count,
    Percent = paste0(merged_data$percentage, "%"),
    stringsAsFactors = FALSE
  )

  # Create table with conditional formatting
  tt_table <- display_table |>
    tinytable::tt(caption = "Monthly Enrollment Progress")

  # Highlight rows where percentage >= 80% (green)
  success_rows <- which(merged_data$percentage >= 80)
  if (length(success_rows) > 0) {
    tt_table <- tt_table |>
      tinytable::style_tt(i = success_rows, background = "#e8f5e9")
  }

  # Highlight rows where percentage < 50% and target > 0 (red)
  warning_rows <- which(merged_data$percentage < 50 & merged_data$Target > 0)
  if (length(warning_rows) > 0) {
    tt_table <- tt_table |>
      tinytable::style_tt(i = warning_rows, background = "#ffebee")
  }

  tt_table

} else {
  # Fallback: just show targets if no enrollment breakdown available
  enrollment_data |>
    tinytable::tt(caption = "Monthly Enrollment Targets")
}
```
:::
