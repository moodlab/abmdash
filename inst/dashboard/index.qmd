---
title: "MDL R01 GABM Participant Dashboard"
---

## Column {width=50%}

::: {.card title="Upcoming Participant Schedule"}

```{r}
# Get today's calendar events from Google Calendar
calendar_events <- tryCatch({
  # Test Google Calendar API connection
  service_account_json <- Sys.getenv("GOOGLE_SERVICE_ACCOUNT_JSON")
  
  if (service_account_json == "" || is.na(service_account_json)) {
    # Show message when Google Calendar not configured
    data.frame(
      Time = "Not configured",
      Event = "GOOGLE_SERVICE_ACCOUNT_JSON not set",
      stringsAsFactors = FALSE
    )
  } else {
    # Get next week's events (today through next 7 days)
    today_start <- paste0(Sys.Date(), "T00:00:00Z")
    next_week_end <- paste0(Sys.Date() + 7, "T23:59:59Z")
    
    # Use the specific Calendar ID for "Research Team Schedule"
    events <- abmdash::get_calendar_events(
      calendar_id = "ff5b00ef944953433c805960d64adae47a456ee0d2515410cc648f65bafc2635@group.calendar.google.com",
      time_min = today_start,
      time_max = next_week_end,
      max_results = 20
    )
    
    # Debug: Check what we're getting
    debug_info <- paste(
      "API Response - Items count:", if("items" %in% names(events)) length(events$items) else "No items field",
      "| Time range:", today_start, "to", next_week_end,
      "| Today:", Sys.Date(), "| Next week end:", Sys.Date() + 7
    )
    
    # Format events for display
    if (is.list(events) && "items" %in% names(events) && length(events$items) > 0) {
      # Filter events to only include those with "UT Attention Bias Modification" in the title
      filtered_events <- Filter(function(event) {
        summary <- event$summary %||% ""
        grepl("UT Attention Bias Modification", summary, ignore.case = TRUE)
      }, events$items)
      
      if (length(filtered_events) > 0) {
        event_list <- lapply(filtered_events, function(event) {
        # Extract time and date from start datetime
        if (!is.null(event$start$dateTime)) {
          # Parse and format the datetime
          dt <- as.POSIXct(event$start$dateTime, format = "%Y-%m-%dT%H:%M:%S", tz = "UTC")
          event_date <- as.Date(dt)
          days_diff <- as.numeric(event_date - Sys.Date())
          
          if (days_diff == 0) {
            start_time <- paste("Today", format(dt, "%I:%M %p"))
          } else if (days_diff == 1) {
            start_time <- paste("Tomorrow", format(dt, "%I:%M %p"))
          } else {
            day_name <- format(event_date, "%a")
            start_time <- paste(day_name, format(event_date, "%m/%d"), format(dt, "%I:%M %p"))
          }
        } else if (!is.null(event$start$date)) {
          event_date <- as.Date(event$start$date)
          days_diff <- as.numeric(event_date - Sys.Date())
          
          if (days_diff == 0) {
            start_time <- "Today (All Day)"
          } else if (days_diff == 1) {
            start_time <- "Tomorrow (All Day)"
          } else {
            day_name <- format(event_date, "%a")
            start_time <- paste(day_name, format(event_date, "%m/%d"), "(All Day)")
          }
        } else {
          start_time <- "Unknown"
        }
        
        # Get event summary
        summary <- if (!is.null(event$summary)) event$summary else "No title"
        
        data.frame(
          Time = start_time,
          Event = summary,
          stringsAsFactors = FALSE
        )
        })
        
        do.call(rbind, event_list)
      } else {
        data.frame(
          Time = "No ABM events",
          Event = "No UT Attention Bias Modification events scheduled",
          stringsAsFactors = FALSE
        )
      }
    } else {
      data.frame(
        Time = "Debug Info",
        Event = debug_info,
        stringsAsFactors = FALSE
      )
    }
  }
}, error = function(e) {
  data.frame(
    Time = "Error",
    Event = paste("Full error:", e$message),
    stringsAsFactors = FALSE
  )
})

# Display calendar events
calendar_events |>
  tinytable::tt(caption = "Upcoming Week's Schedule")
```

:::

::: {.card title="Recent Eligible Participants (Check if Scheduled)"}

```{r}
# Get eligible participants from report 11942
eligible_participants <- tryCatch({
  token <- Sys.getenv("REDCAP_API_TOKEN")
  
  if (token == "" || is.na(token)) {
    # Show message when REDCap not configured
    data.frame(
      Status = "REDCAP_API_TOKEN not configured",
      Total_Records = 0,
      Eligible_Count = 0,
      stringsAsFactors = FALSE
    )
  } else {
    # Get eligible participants using our filtering function
    abmdash::get_eligible_participants()
  }
}, error = function(e) {
  data.frame(
    Status = paste("Error:", substr(e$message, 1, 50)),
    Total_Records = 0,
    Eligible_Count = 0,
    stringsAsFactors = FALSE
  )
})

# Display the results
if ("record_id" %in% names(eligible_participants)) {
  # We have actual participant data - rename columns and display
  display_data <- eligible_participants
  names(display_data) <- c("Record ID", "Screen Date", "Link to REDCap Record")
  
  display_data |>
    tinytable::tt(caption = "Eligible Participants (Past 30 Days)") |>
    tinytable::format_tt(
      j = "Link to REDCap Record",
      fn = function(x) paste0('<a href="', x, '" target="_blank">View Record</a>')
    )
} else {
  # We have summary data - display as is
  eligible_participants |>
    tinytable::tt(caption = "Eligible Participants Summary")
}
```

:::

## Column {width=50%}

::: {.card title="Status of Follow-Up Surveys"}

```{r}
# Get upcoming follow-ups (Week 12, 16, 28)
upcoming_followups <- tryCatch({
  token <- Sys.getenv("REDCAP_API_TOKEN")
  
  if (token == "" || is.na(token)) {
    # Show sample data when REDCap not configured
    data.frame(
      record_id = c("1420", "1385", "1555", "1604"),
      follow_up_type = c("Week 12", "Week 16", "Week 12", "Week 28"),
      w4_completion_date = c("2024-06-01", "2024-05-15", "2024-06-03", "2024-01-15"),
      due_date = c("2024-07-27", "2024-08-07", "2024-07-29", "2024-07-22"),
      days_until_due = c(-3, 5, -1, 2),
      status = c("Overdue by 3 days", "Due in 5 days", "Overdue by 1 day", "Due in 2 days"),
      stringsAsFactors = FALSE
    )
  } else {
    # Get actual upcoming follow-ups (next 14 days)
    abmdash::get_upcoming_followups(days_ahead = 14)
  }
}, error = function(e) {
  cat("Follow-up tracking error:", e$message, "\n")
  data.frame(
    record_id = "ERROR",
    follow_up_type = "API Error",
    w4_completion_date = "",
    due_date = "",
    days_until_due = 0,
    status = paste("Error:", substr(e$message, 1, 20)),
    stringsAsFactors = FALSE
  )
})

# Display results
if (nrow(upcoming_followups) > 0) {
  # Update status messages to use "Send" instead of "Due" for future dates
  updated_status <- sapply(1:nrow(upcoming_followups), function(i) {
    days_until <- upcoming_followups$days_until_due[i]
    
    if (days_until < 0) {
      # Overdue - keep as is
      paste("Overdue by", abs(days_until), "days")
    } else if (days_until == 0) {
      # Due today - change to "Send Today"
      "Send Today"
    } else {
      # Future date - change to "Send in X days"
      paste("Send in", days_until, "days")
    }
  })
  
  # Format the display with colors for urgency
  display_table <- data.frame(
    "Participant" = upcoming_followups$record_id,
    "Follow Up" = upcoming_followups$follow_up_type,
    "Due Date" = format(as.Date(upcoming_followups$due_date), "%m/%d"),
    "Status" = updated_status,
    stringsAsFactors = FALSE
  )
  
  # Create tinytable with conditional formatting
  tt_table <- display_table |>
    tinytable::tt()
  
  # Add highlighting for overdue items
  if (any(grepl("Overdue", display_table$Status))) {
    overdue_rows <- which(grepl("Overdue", display_table$Status))
    tt_table <- tt_table |>
      tinytable::style_tt(i = overdue_rows, background = "#ffebee")
  }
  
  # Add highlighting for send today
  if (any(grepl("Send Today", display_table$Status))) {
    send_today_rows <- which(grepl("Send Today", display_table$Status))
    tt_table <- tt_table |>
      tinytable::style_tt(i = send_today_rows, background = "#fff3e0")
  }
  
  tt_table
} else {
  data.frame(Message = "No follow-ups due in the next 2 weeks") |> 
    tinytable::tt()
}
```
:::
