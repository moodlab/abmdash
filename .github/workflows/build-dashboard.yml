name: Build Dashboard Daily

on:
  schedule:
    - cron: '0 6 * * *'   # Run daily at 6 AM UTC
  workflow_dispatch:       # Allows manual trigger
  push:
    branches: [ main ]     # Run on pushes to main

jobs:
  build-image:
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/abmdash
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-dashboard:
    runs-on: ubuntu-latest
    needs: build-image

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run dashboard build
        env:
          STATICRYPT_PASSWORD: ${{ secrets.STATICRYPT_PASSWORD }}
          REDCAP_API_TOKEN: ${{ secrets.REDCAP_API_TOKEN }}
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
        run: |
          docker run --rm \
            -v "$(pwd)/docs:/project/docs" \
            -e STATICRYPT_PASSWORD="$STATICRYPT_PASSWORD" \
            -e REDCAP_API_TOKEN="$REDCAP_API_TOKEN" \
            -e GOOGLE_SERVICE_ACCOUNT_JSON="$GOOGLE_SERVICE_ACCOUNT_JSON" \
            -w /project \
            ghcr.io/${{ github.repository_owner }}/abmdash:latest \
            bash -c "
              set -e
              echo 'ðŸ”§ Using prebuilt renv library...'
              Rscript -e \"
                source('/project/renv/activate.R');
                cat('Library paths:', .libPaths(), '\n');
                cat('Contents of main library:', list.files(.libPaths()[1]), '\n');
                cat('Looking for abmdash dir:', dir.exists(file.path(.libPaths()[1], 'abmdash')), '\n');
                cat('Looking for abmdash:', 'abmdash' %in% rownames(installed.packages()), '\n');
                # Always install abmdash to ensure it's available
                cat('Installing abmdash package...\n');
                install.packages('/project', repos=NULL, type='source', dependencies=FALSE);
                cat('abmdash installation completed\n');
                
                library(quarto);
                setwd('/tmp');
                file.copy('/project/inst/dashboard/index.qmd', '/tmp/index.qmd', overwrite = TRUE);
                file.copy('/project/inst/dashboard/_quarto.yml', '/tmp/_quarto.yml', overwrite = TRUE);
                if (dir.exists('/project/inst/dashboard/.quarto')) {
                  file.copy('/project/inst/dashboard/.quarto', '/tmp/', recursive = TRUE);
                }
                quarto::quarto_render('/tmp/index.qmd');
                file.copy('/tmp/index.html', '/project/docs/index.html', overwrite = TRUE);
                if (dir.exists('/tmp/site_libs')) {
                  file.copy('/tmp/site_libs', '/project/docs/', recursive = TRUE);
                }
              \"

              if [ -n \"\$STATICRYPT_PASSWORD\" ]; then
                echo 'ðŸ”’ Encrypting output...'
                cd /project/docs
                for html in *.html; do
                  [ -f \"\$html\" ] || continue
                  staticrypt \"\$html\" \
                    -p \"\$STATICRYPT_PASSWORD\" \
                    --short \
                    --remember 30 \
                    --template-color-primary \"#6667AB\" \
                    --template-color-secondary \"#f9f9f3\" \
                    --template-title \"MDL R01 GABM Dashboard\" \
                    --template-instructions \"Enter the Password\" \
                    --template-button \"Access\"
                  # Move encrypted file from encrypted/ subdirectory back to main directory
                  if [ -f \"encrypted/\$html\" ]; then
                    mv \"encrypted/\$html\" \"\$html\"
                    rmdir encrypted 2>/dev/null || true
                  fi
                done
              fi
            "

      - name: Commit and push updated dashboard
        if: github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -f docs/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "ðŸ¤– Update dashboard - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            git push
          fi

      - name: Upload dashboard artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dashboard-${{ github.run_number }}
          path: docs/
          retention-days: 30

